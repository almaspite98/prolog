-module(khf1).
-author('almaspite98@gmail.com').
-vsn('2020.10.12.').
-export([ main/0, cella/3]).


		

fib(0, 1) :- !.
fib(1, 1) :- !.
fib(N, Result) :- 
	N1 is N - 1, 
	N2 is N - 2,
	fib(N1, Result1),
	fib(N2, Result2),
	Result is Result1 + Result2.
	
dosomething([]).
dosomething([H|T]) :- 
	%% process(H), 
	print(H),
	dosomething(T).
	
% slice(L1,I,K,L2) :- L2 is the list of the elements of L1 between
%    index I and index K (both included).
%    (list,integer,integer,list) (?,+,+,?)

%% slice([X|_],0,0,[X]).
%% slice([X|Xs],0,K,[X|Ys]) :- K > 0, 
%%    K1 is K - 1, slice(Xs,0,K1,Ys).
%% slice([_|Xs],I,K,Ys) :- I > 0, 
%%    I1 is I - 1, K1 is K - 1, slice(Xs,I1,K1,Ys).
%% 
%% my_flatten(X,[X]) :- \+ is_list(X).
%% my_flatten([],[]).
%% my_flatten([X|Xs],Zs) :- my_flatten(X,Y), my_flatten(Xs,Ys), append(Y,Ys,Zs).





%% count_to_x(X,X):-print(X).
count_to_x(I,X):-
	I<X,
	I1 is I+1,
	count_to_x(I1, X).
count_to_x(I,X):-
	I==X,
	X1 is X+1,
	print(X1).
	




%%get_list([H|_],0, J) :- get_element(H,J).
%%get_list([_|T], I, J) :-
%%I1 is I-1,
%%get_list(T, I1, J).



%% get_element([H|_],0) :- print(H),nl.
%% get_element([_|T], I) :-
%% I1 is I - 1,
%% get_element(T, I1).

get_element([H|_],0, H).
get_element([H|_],0, _) :- 
	L1 is H,
	print(L1),nl,
	print('d'), nl,
	get_element([H|_],0, L1).
get_element([_|T], I, L) :-
	I1 is I-1,
	print('c'), nl,
	get_element(T, I1, L).

get_result_list(M,I,J,K,L,IC,JC,L):-
	print('b'), nl,
	IC is K*K.
	%%LR is L.
get_result_list(M,I,J,K,L,IC,JC,LR):-
	I1 is I + IC mod K,
	get_element(M,I1,L1),
	get_element(L1,JC,E1),
	append(L,[E1],L2),
	
	IC1 is IC + 1,
	JC1 is J + truncate(IC1/K),
	print('a'), nl,
	get_result_list(M,I,J,K,L2,IC1,JC1,LR).


	%% ( condition -> then_clause ; else_clause )
iterate(IC,JC,K):-
	IC is K*K-1.
iterate(IC, JC, K):-
		IC1 is IC + 1,
		JC1 is 0 + truncate(IC1/K),
		iterate(IC1,JC1,K).
	
	
% :- type field == int.
% :- type board  == list(list(field)).
% :- pred cella(board::in, int::in, list(field)::out).
% cella(S, I, C): C egy olyan lista, amely az S Sudoku-mátrix
%    I-edik cellájának elemeit oszlopfolytonosan tartalmazza.
cella(S,I,C):-
	length(S,K),
	K1 is truncate(sqrt(K)),
	X is truncate((I-1)/K1)*K1,
	Y is ((I-1-(truncate((I-1)/K1))*K1)*K1),
	get_result_list(S,X,Y,K1,[],0,Y, C),
	print(C),nl.
	

main :-
	%% lista_zsak([1,2,3,3,3,3],NA),
	%% print(NA),nl,
	%% fib(3, R),
	%% print(R),nl,
	%% dosomething([1,2,3]),nl,
	%% X1 = [1,2,3],
	%% append(X1,[4,5,6], X),
	%% print(X),nl,
	%% slice([[6,2,3,4],
    %%         [9,7,8,3],
    %%         [1,4,5,7],
    %%         [4,6,1,2]],2,3,Z),
	%% %% flatten(Z, Y),
	%% %% slice([1,2,3],1,1,Z),
	%% %% print(Y),nl,
	%% print(Z),nl,
	%% count_to_x(0,10),nl,
	%% 
	%% %% get_element([1,2,3,4],2),nl,
	%% length([[6,2,3,4],
    %%         [9,7,8,3],
    %%         [1,4,5,7],
    %%         [4,6,1,2]],N),
	%% GYOK_D is truncate(sqrt(N)),
	%% print(GYOK_D),nl,
	%% 
	%% T  is 13,
	%% R is T mod 3,
	%% 1 is R mod 3,
	%% print(R),nl,
	%% get_element([[6,2,3,4],
    %%         [9,7,8,3],
    %%         [1,4,5,7],
    %%         [4,6,1,2]],3,P),
	%% get_element([6,2,3,4],3,E),
	%% print(P),nl,
	%% print(E),nl,
	%% append(P,[2],L1),
	%% print(L1),nl,
	%% I is 3,
	%% IC is 10,
	%% K is 3,
	%% I1 is I + IC mod K,
	%% print(I1),nl,
	%% 
	%% iterate(0,0,3),
	%%get_result_list(
	%%		[[0,8,0,2,3,4,1,0,5],
    %%        [0,0,9,0,5,0,4,0,1],
    %%        [8,0,0,2,9,6,1,0,4],
    %%        [0,2,1,7,8,0,0,0,0],
    %%        [0,3,9,0,5,7,2,0,7],
    %%        [0,4,0,8,2,9,6,1,3],
    %%        [0,1,0,9,0,5,0,4,0],
    %%        [0,5,0,6,0,2,7,3,9],
    %%        [0,0,0,0,0,0,0,0,0]],3,3,3,[],0,3, LR),
	%%print(LR),nl,
	%%cella([[0,8,0,2,3,4,1,0,5],
    %%        [0,0,9,0,5,0,4,0,1],
    %%        [8,0,0,2,9,6,1,0,4],
    %%        [0,2,1,7,8,0,0,0,0],
    %%        [0,3,9,0,5,7,2,0,7],
    %%        [0,4,0,8,2,9,6,1,3],
    %%        [0,1,0,9,0,5,0,4,0],
    %%        [0,5,0,6,0,2,7,3,9],
    %%        [0,0,0,0,0,0,0,0,0]],5,C),
	%%		print(C),nl,
	
	nl,
	print('cella([[1]], 1, C): '),nl,cella([[1]], 1, C),nl,
	print('cella([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 1, C2): '),nl,cella([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 1, C2),nl,
	%%print('cella([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 2, C3): '),nl,cella([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 2, C3),nl,
	%%print('cella([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 3, C4): '),nl,cella([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 3, C4),nl,
	%%print('cella([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 4, C5): '),nl,cella([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 4, C5),nl,
	%%print('cella([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]], 1,C6): '),nl,cella([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]], 1,C6),nl,
	%%print('cella([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]], 2, C7): '),nl,cella([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]], 2, C7),nl,
	%%print('cella([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]], 3, C8): '),nl,cella([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]], 3, C8),nl,
	%%print('cella([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]], 4, C9): '),nl,cella([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]], 4, C9),nl,
	%%print('cella([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]], 5, C10): '),nl,cella([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]], 5, C10),nl,
	%%print('cella([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]], 6, C11): '),nl,cella([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]], 6, C11),nl,
	%%print('cella([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]], 7, C12): '),nl,cella([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]], 7, C12),nl,
	%%print('cella([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]], 8, C13): '),nl,cella([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]], 8, C13),nl,
	%%print('cella([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]], 9, C14): '),nl,cella([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]], 9, C14),nl,
	%%print('cella([[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],[49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],[81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],[97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112],[113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128],[129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144],[145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160],[161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176],[177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192],[193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208],[209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224],[225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240],[241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256]], 10, C15): '),nl,cella([[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],[49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],[81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],[97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112],[113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128],[129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144],[145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160],[161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176],[177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192],[193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208],[209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224],[225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240],[241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256]], 10, C15),nl,
	halt.
